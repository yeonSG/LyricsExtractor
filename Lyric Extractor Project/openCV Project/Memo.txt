   
     개발해야 할 것
     - ROI(자막영역) 고정 값이 아닌 얻어진 값
     
     ---------------할것----------------
     - 디버깅
     - UI 구성 : 
        1. 입력 : 파일 1개 or Directory 
        exam :  lyricExtractor.exe  [인자1]
                인자1 : 파일 or 폴더
                   - 파일이면 해당 파일만 분석
                   - 폴더면 해당 폴더 내부의 모든 파일 분석

    

    어떻게 하면 완성도를 높일 수 있을까..?
    - 로깅 재구현
    - 폴더가 중복된다면 

    
     ---------------프로그램 흐름----------------
1. 영상 frame별 흰점 개수 Count
    - input : 영상
    - output: 영상의 frame별 White Pixcel Count
    : 가사 색칠된 픽샐의 개수 Count (색칠된것은 검-흰-빨(파) 의 배열이 존재하는 곳에서 흰색 지점을 말함 )

2. Peak 판별
    - input : 영상의 frame별 White Pixcel Count
    - output: 판별된 Peak의 frame 
    : 이상적으로 추출된 Peak는 Line의 끝점 frame이 됨.

3. Peak에서 Line 판별
    - input : 판별된 Peak의 frame, frame별 White Pixcel Count
    - output: 대략적인 Line의 start-end frame

4. Line 중 유효한 라인을 걸러내고 정확한 start-end frame을 잡아냄
    - input : 대략적인 Line의 start-end frame, 영상
    - output: 유효한 라인의 정확한 start-end frame, 해당 라인의 OCR 입력 이미지 (글자 흑백으로 이루어진 이미지)
    : python코드의 ML 아웃풋 사용해 mask image를 사용함.

5. 확정된 라인의 text를 얻음
    - input : 유효한 라인의 정확한 start-end frame, 해당 라인의 OCR 입력 이미지 (글자 흑백으로 이루어진 이미지)
    - output: 라인의 OCR output인 text, "Lyric.txt"
    : 글자의 흑백 이미지인 mask image를 저장한 후 각각을 OCR 입력으로 넣어 text를 얻어냄

6. OCR의 결과와 mask image를 비교해 워드 단위의 시간을 뽑아냄
    - input : 라인의 OCR output text, 라인의 start-end 정보, 라인의 mask image
    - output: 라인의 word 개수와 word별 start-end frame, "Lyrics_withWord.txt"
    
*예상 문제점
1. 예상치 못한 영상의 Lyric 스타일
    - 현 구현상태의 1단계에서 흰점 개수를 count할 때 사용되는 알고리즘에 벗어나는 입력이 들어 올 경우 알아채지 못함. (EX. grammy_vol8_4.mp4)
    - 이 문제가 발생했을 때 고칠 수 있는 부분은 뭘까?
        : 일단 1번 whiteCount 하




        
*** 해결해야할 것. (video.mp4) *** 
1. 라인 못찾은것 
<< 2176		// [2155]	ฉ้นไม่ได้ใจร้าย	[2176]	// 노이즈 껴서.. ()

2. fade-out 을 포함한 end-frame 정확도 
 - 

3. purple 라인 2개 확인
[2020-05-06 11:11:49. 6] : Line : 2608 - 2608		// 노이즈
[2020-05-06 11:11:49. 6] : Line : 2970 - 2985		// 노이즈

4. Blue, Red, Purple 함께 진행하는 것 검토해야함 
        또는
    따로 진행 후 병합하는 알고리즘 구현해야함

*** 진도 관련 ***
1. bin 이미지 저장       @
2. tesseract 수행         @
3. word calibration 수행  
4. json 저장              @

5. 라인 Unprint컬러 주황색(노랑)인 것 LineFind에 적용

>> 우선순위 : 핵심적인 기능 먼저 구현, 이후에
 : ★☆핵심★☆ => 모든종류의 동영상에서 어느정도 안정된 라인 뽑기가 되어야 함.
 :  >> 1. 모든 라인의 peak를 찾아야함. ()
    >> 2. 찾은 peak들의 line을 찾아야 함. (흰-오 Unprint패턴에 대한 캐치가 되어야 함)
    >> 3. line들의 word calibration 이 잘 되어야 함


>> 추가 알고리즘1
    : peak 찾는 알고리즘에서 패턴이 차는 순간과 이전 프래임(weight 사용)을 사용해 색칠 전 색 파악가능(Unprint Color)

>> 트윈라인 마지막 라인 2개 찾는것에 오류가 나는 것에 대한 처리..
    : 라인 구할 때 매인 라인에 대한 row를 구하여 누적하다보면 해당 row가 2개가 나올 시 트윈라인으로 판단하여 subImage를 2개로 나눠서 진행 하도록 함.

>> fade-out 이 길어질 경우 isPeakFrame2에서 판단이 잘 안될 때가 있음

[2020-05-19 21:03:27.19] : Line 0 : 697 ~ 728
[2020-05-19 21:03:27.19] : Line 1 : 776 ~ 808
[2020-05-19 21:03:27.19] : Line 2 : 861 ~ 889
[2020-05-19 21:03:27.19] : Line 3 : 940 ~ 979
[2020-05-19 21:03:27.19] : Line 4 : 1034 ~ 1062
[2020-05-19 21:03:27.19] : Line 5 : 1111 ~ 1147
[2020-05-19 21:03:27.19] : Line 6 : 1193 ~ 1262
[2020-05-19 21:03:27.19] : Line 7 : 1279 ~ 1306
[2020-05-19 21:03:27.19] : Line 8 : 1364 ~ 1422
[2020-05-19 21:03:27.19] : Line 9 : 1445 ~ 1502
[2020-05-19 21:03:27.19] : Line 10 :1533 ~ 1586
[2020-05-19 21:03:27.19] : Line 11 :1615 ~ 1666
[2020-05-19 21:03:27.19] : Line 12 :1703 ~ 1732
[2020-05-19 21:03:27.19] : Line 13 :1779 ~ 1809
[2020-05-19 21:03:27.19] : Line 14 :1863 ~ 1912
[2020-05-19 21:03:27.19] : Line 15 :1949 ~ 1996
[2020-05-19 21:03:27.19] : Line 16 :2032 ~ 2102
[2020-05-19 21:03:27.19] : Line 17 :2116 ~ 2155
[2020-05-19 21:03:27.19] : Line 18 :2785 ~ 2822
[2020-05-19 21:03:27.19] : Line 19 :2863 ~ 2897
[2020-05-19 21:03:27.19] : Line 20 :2946 ~ 2987
[2020-05-19 21:03:27.19] : Line 21 :3030 ~ 3067
[2020-05-19 21:03:27.19] : Line 22 :3118 ~ 3146
[2020-05-19 21:03:27.19] : Line 23 :3197 ~ 3236
[2020-05-19 21:03:27.19] : Line 24 :3286 ~ 3348
[2020-05-19 21:03:27.19] : Line 25 :3361 ~ 3406
[2020-05-19 21:03:27.19] : Line 26 :3534 ~ 3585
[2020-05-19 21:03:27.19] : Line 27 :3618 ~ 3676
[2020-05-19 21:03:27.19] : Line 28 :3703 ~ 3762
[2020-05-19 21:03:27.19] : Line 29 :3787 ~ 3824
[2020-05-19 21:03:27.19] : Line 30 :3866 ~ 3907
[2020-05-19 21:03:27.19] : Line 31 :3952 ~ 4014
[2020-05-19 21:03:27.19] : Line 32 :4039 ~ 4094
[2020-05-19 21:03:27.19] : Line 33 :4117 ~ 4189
[2020-05-19 21:03:27.19] : Line 34 :4203 ~ 4238